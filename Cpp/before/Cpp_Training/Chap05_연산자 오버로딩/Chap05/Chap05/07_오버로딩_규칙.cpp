
/*

오버로딩의 필요성과 편의성은 긍정적이지만 문법을 확장하다 보니
부작용과 위험이 따른다.

그래서 연산자 오버로딩에는 많은 규칙과 제약이 있는데 상식에 크게 벗어나지 않는다.

1. 연산자 오버로딩은 기존 연산자를 대상으로 할 뿐 없는 연산자를 임의로 정의할 수는 없다.
   - C++에는 ** 연산자가 없어 되지 않는다.
   - 하지만 기존 연산자가 아닌 $ @ 기호에 연산 기능을 부여하는 것은 가능하다.

2. 언어의 핵심적인 기능을 담당하는 연산자와 클래스 관련 연산자는 오버로딩 대상에서 제외
   - ::, .(구조체 멤버 연산자), ?: (삼항 조건 연산자) 등

3. 연산자의 기능은 바꾸더라도 고유의 속성은 변경할 수 없다. 
   - + 경우 이항 연산자이므로 재정의 하여도 두 개의 피연산자를 취해야한다.
   - 우선순위와 결합 순서도 변하지 않는다. + 보다 *가 먼저 실행 되는 식

4. 피연산자 중 하나는 정의형이어야 한다.
   - 기본 타입끼리 연산하는 방법은 컴파일러에 이미 규정되어 있어 오버로딩할 수 없다.

*/
